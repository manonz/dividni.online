let questionEditor,
  answerEditor,
  expressionEditor,
  correctsMCQEditor,
  incorrectsMCQEditor,
  //lambdaEditor,
  shortTextAnswersEditor;

const getSanitisedEditorContent = (editor) => {
  return DOMPurify.sanitize(editor.getData().trim());
};

const isContentEmpty = (content) => {
  return DOMPurify.sanitize(content, { ALLOWED_TAGS: [] }).length === 0;
};

// TO DO: Check spaces with referencing variables
document.addEventListener("DOMContentLoaded", () => {
  displayCustomFormElements();
  displayVariables();

  document.getElementById("preview").addEventListener("click", previewResults);

  document
    .getElementById("dividni-form")
    .addEventListener("submit", downloadQuestionBank);

  showVersion();
});

function downloadCode() {
  completeFormValid = 1;
  clearStatus();

  switch (questionType) {
    case "Numerical":
      copyCodeNumericalMarkup();
      break;
    case "ShortText":
      copyCodeShortTextMarkup();
      break;
    case "MCQ":
      copyCodeMcqMarkup();
      break;
  }
}

function previewResults(e) {
  e.preventDefault();

  completeFormValid = 1;
  clearStatus();

  switch (questionType) {
    case "Numerical":
      previewNumericalMarkup();
      break;
    case "ShortText":
      previewShortTextMarkup();
      break;
    case "MCQ":
      previewMcqMarkup();
      break;
  }
}

function hideElement(el) {
  el.setAttribute("aria-hidden", "true");

  if (!el.classList.contains("visually-hidden")) {
    el.classList.add("visually-hidden");
  }
}

function showElement(el) {
  el.setAttribute("aria-hidden", "false");

  if (el.classList.contains("visually-hidden")) {
    el.classList.remove("visually-hidden");
  }
}

function displayCustomFormElements() {
  const numericalMcqEditor = document.getElementById("ckeditorquestion");
  var formSections = document.querySelectorAll(".create__form__section");
  formSections.forEach(function (section) {
    hideElement(section);
  });

  showElement(numericalMcqEditor);

  showElement(document.getElementById(questionType + "Form"));
}

function changeQuestionType() {
  const questionType = getSanitisedValue(
    document.getElementById("questionType")
  );
  setSelectedQuestionType(questionType);

  displayCustomFormElements();
}

function processBasicFormData() {
  const nameField = document.getElementById("questionName");
  const name = getSanitisedValue(nameField);
  const variantField = document.getElementById("variantCountSelector");
  const variantCount = getSanitisedValue(variantField);
  const targetPlatformField = document.getElementById("targetPlatformSelector");
  const targetPlatform = getSanitisedValue(targetPlatformField);

  [
    nameField.id,
    variantField.id,
    targetPlatformField.id,
    "answer",
    "question",
  ].forEach((id) => {
    document.getElementById(id + "Error").innerText = "";
  });

  [variantField, targetPlatformField].forEach((field) => {
    const val = getSanitisedValue(field);

    if (!val || !val?.length) {
      applyError(field.id, "This field is required.");
    }
  });

  const questionContent = getSanitisedEditorContent(questionEditor);

  if (isContentEmpty(questionContent)) {
    applyError("question", "This field should not be blank.");
  }

  return {
    HtmlCode: questionContent,
    questionName: name && name?.length ? name : "AutoGeneratedQ",
    variantCount,
    targetPlatform,
    variables,
  };
}

function getNumericalFormData() {
  const basicFormData = processBasicFormData();
  let errorMargin = 0;
  answer = getSanitisedEditorContent(answerEditor);

  if (isContentEmpty(answer)) {
    applyError("answer", "This field should not be blank.");
  }

  if (document.getElementById("Numerical-error-margin").value.trim().length) {
    errorMargin = getSanitisedValue(
      document.getElementById("Numerical-error-margin")
    );
  }

  return { ...basicFormData, answer, errorMargin };
}

function getShortTextFormData() {
  const basicFormData = processBasicFormData();
  document.getElementById("shortTextAnswersError").innerText = "";

  const input = getSanitisedEditorContent(shortTextAnswersEditor);

  if (isContentEmpty(input)) {
    applyError("shortTextAnswers", "This field should not be blank.");
    return;
  }

  answer = input;

  return { ...basicFormData, answer };
}

function getMcqFormData() {
  const basicFormData = processBasicFormData();
  const answer = getSanitisedEditorContent(correctsMCQEditor);
  const incorrects = getSanitisedEditorContent(incorrectsMCQEditor);

  if (isContentEmpty(answer)) {
    applyError("correct-mcq", "This field should not be blank.");
  } else if (isContentEmpty(incorrects)) {
    applyError("incorrect-mcq", "This field should not be blank.");
  }
  return { ...basicFormData, answer, incorrects };
}

function previewNumericalMarkup() {
  previewBase(getNumericalFormData(), "PreviewNumericalMarkup");
}

function previewShortTextMarkup() {
  previewBase(getShortTextFormData(), "PreviewShortTextMarkup");
}

function copyCodeMcqMarkup() {
  const multiChoice = document.getElementById("multipleChoiceCheckbox").checked;

  const formData = getMcqFormData();

  if (multiChoice) {
    downLoadCodeBase(formData, "CodeFromMcqXyzMarkup");
  } else {
    downLoadCodeBase(formData, "CodeFromMcqTruthMarkup");
  }
}

function copyCodeNumericalMarkup() {
  downLoadCodeBase(getNumericalFormData(), "CodeFromNumericalMarkup");
}

function copyCodeShortTextMarkup() {
  downLoadCodeBase(getShortTextFormData(), "CodeFromShortTextMarkup");
}

function downloadQuestionBank(e) {
  e.preventDefault();

  completeFormValid = 1;
  clearStatus();

  switch (questionType) {
    case "Numerical":
      downloadNumericalMarkup();
      break;
    case "ShortText":
      downloadShortTextMarkup();
      break;
    case "MCQ":
      downloadMcqMarkup();
      break;
  }
}

function downloadNumericalMarkup() {
  downloadBase(getNumericalFormData(), "DownloadQuestionBankNumericalMarkup");
}

function downloadShortTextMarkup() {
  downloadBase(getShortTextFormData(), "DownloadQuestionBankShortTextMarkup");
}

function downloadMcqMarkup() {
  const multiChoice = document.getElementById("multipleChoiceCheckbox").checked;

  const formData = getMcqFormData();

  if (multiChoice) {
    downloadBase(formData, "DownloadQuestionBankMcqXyzMarkup");
  } else {
    downloadBase(formData, "DownloadQuestionBankMcqTruthMarkup");
  }
}